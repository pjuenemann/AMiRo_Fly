function [sensordataTWB, sensordataFC] = importFCsensorData(filename)
%% Function for importing data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Philipp\Desktop\Masterprojekt\Kalmanfilter\MatLab2017a\Json2Mat\TestStringMani.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/05/16 12:15:33

%% Initialize variables.
%filename = 'C:\Users\Philipp\Desktop\Masterprojekt\Kalmanfilter\MatLab2017a\Json2Mat\TestStringMani.txt';
delimiter = {'{&quot','quot',', &',': ',';'};

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string',  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
M = cell2mat(raw);

tmpSensordataTWB = zeros(1,7);
tmpSensordataFC = zeros(1,12);
for i = 1:size(M,1)
    if sum(~isnan(M(i,:))) == 7
        tmpSensordataTWB = [tmpSensordataTWB; M(i,~isnan(M(i,:)))];
    else
        tmpSensordataFC = [tmpSensordataFC; M(i,~isnan(M(i,:)))];
    end
end
tmpSensordataTWB(1,:) = [];
tmpSensordataFC(1,:) = [];

% 1: timestamp
% 2: translationX
% 3: translationY
% 4: translationZ
% 5: rotationX
% 6: rotationY
% 7: rotationZ
sensordataTWB = zeros(size(tmpSensordataTWB));
sensordataTWB(:,1) = tmpSensordataTWB(:,1);
sensordataTWB(:,2) = tmpSensordataTWB(:,3);
sensordataTWB(:,3) = tmpSensordataTWB(:,2);
sensordataTWB(:,4) = tmpSensordataTWB(:,4);
sensordataTWB(:,5) = tmpSensordataTWB(:,6);
sensordataTWB(:,6) = tmpSensordataTWB(:,5);
sensordataTWB(:,7) = tmpSensordataTWB(:,7);

sensordataFC = zeros(size(tmpSensordataFC));
% 1: timestamp
% 2: gyroscopeX
% 3: gyroscopeY
% 4: gyroscopeZ
% 5: accelerometerX
% 6: accelerometerY
% 7: accelerometerZ
% 8: magnetometerX
% 9: magnetometerY
% 10: magnetometerZ
% 11: baroAlt
% 12: baroTmp
sensordataFC(:,1) = tmpSensordataFC(:,1);
sensordataFC(:,2) = tmpSensordataFC(:,10);
sensordataFC(:,3) = tmpSensordataFC(:,11);
sensordataFC(:,4) = tmpSensordataFC(:,7);
sensordataFC(:,5) = tmpSensordataFC(:,8);
sensordataFC(:,6) = tmpSensordataFC(:,9);
sensordataFC(:,7) = tmpSensordataFC(:,12);
sensordataFC(:,8) = tmpSensordataFC(:,6);
sensordataFC(:,9) = tmpSensordataFC(:,2);
sensordataFC(:,10) = tmpSensordataFC(:,5);
sensordataFC(:,11) = tmpSensordataFC(:,3);
sensordataFC(:,12) = tmpSensordataFC(:,4);
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp ;
end